<?php

namespace App\Filament\Client\Resources\SearchMemberResource\Pages;

use App\Filament\Actions\Search\ViewCV;
use App\Filament\Client\Resources\SearchMemberResource;
use App\Filament\Client\Resources\SearchResource;
use App\Models\Opportunity;
use Filament\Actions;
use Filament\Forms;
use Filament\Resources\Components\Tab;
use Filament\Resources\Pages\ListRecords;
use Filament\Support\Enums\MaxWidth;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\View\View;

class ListSearchMembers extends ListRecords
{
    protected static string $resource = SearchMemberResource::class;

    protected static ?string $navigationLabel = "Connection";

    public $parent;

    public function mount(): void
    {
        parent::mount(); // TODO: Change the autogenerated stub
        $this->parent = request()->parent;
    }

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }

    public function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('name')
                    ->toggleable(),
                Tables\Columns\TextColumn::make('first_name')
                    ->searchable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('last_name')
                    ->searchable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('title'),
                Tables\Columns\TextColumn::make('currentProfessionalExperience.position')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->label("Current Title"),
                Tables\Columns\TextColumn::make('currentProfessionalExperience.organization')
                    ->label("Current Organisation")
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('opportunityConnections')
                    ->badge()
                    ->color(fn(string $state): string => match ($state) {
                        'No' => 'gray',
                        'Yes' => 'success',
                    })
                    ->getStateUsing(function ($record) {
                        return $record->opportunityConnection($this->parent) ? "Yes" : "No";
                    })
                    ->label('Contacted'),
                Tables\Columns\TextColumn::make('status')
                    ->badge()
                    ->color(fn(string $state): string => match ($state) {
                        'Pending' => 'gray',
                        'Rejected' => 'danger',
                        'Accepted' => 'success',
                    })
                    ->default('Pending')
                    ->getStateUsing(function ($record) {
                        $status = $record->opportunityConnection($this->parent)?->status;
                        if (is_null($status)) return "Pending";
                        return $status ? "Accepted" : "Rejected";
                    })
                    ->label('Response')
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('contact_status')
                    ->label('Contact Status')
                    ->options([
                        'contacted' => 'Contacted',
                        'not_contacted' => 'Not Contacted',
                        'accepted' => 'Accepted',
                        'declined' => 'Declined',
                    ])
                    ->query(function (array $data, Builder $query) {
                        if ($data['value'] === 'contacted') {
                            $query->whereHas('opportunityConnections', function ($query) {
                                $query->where('opportunity_id', $this->parent);
                            });
                        } elseif ($data['value'] === 'not_contacted') {
                            $query->whereDoesntHave('opportunityConnections', function ($query) {
                                $query->where('opportunity_id', $this->parent);
                            });
                        } elseif ($data['value'] === 'accepted') {
                            $query->whereHas('opportunityConnections', function ($query) {
                                $query->where('opportunity_id', $this->parent)->where('status', 1);
                            });
                        } elseif ($data['value'] === 'declined') {
                            $query->whereHas('opportunityConnections', function ($query) {
                                $query->where('opportunity_id', $this->parent)->where('status', 0);
                            });
                        }
                    }),
            ])
            ->actions([
                Tables\Actions\ViewAction::make('cv')
                    ->modalHeading('')
                    ->icon('heroicon-m-user-circle')
                    ->label('')
                    ->modalWidth(MaxWidth::SevenExtraLarge)
                    ->slideOver()
                    ->modalContent(fn($record): View => view(
                        'filament.pages.search.cv',
                        ['record' => $record],
                    )),
                Tables\Actions\Action::make('connect')
                    ->icon(fn($record) => $record->opportunityConnection($this->parent) ? 'heroicon-m-envelope' : 'heroicon-o-envelope')
                    ->label('')
                    ->color('info')
                    ->action(function ($record) {
                        $record->createOpportunityConnection($this->parent);
                    })
                    ->tooltip('Connect with member')
                    ->disabled(fn($record) => $record->opportunityConnection($this->parent))
                    ->requiresConfirmation()
                    ->modalHeading('Connect with member')
                    ->modalDescription('Are you sure you\'d like to request a connection with this member? An email will be sent to member to accept or reject connection request.'),
                Tables\Actions\Action::make('bookmark')
                    ->icon(fn($record) => $record->opportunityBookmark ? 'heroicon-m-star' : 'heroicon-o-star')
                    ->label('')
                    ->action(function ($record) {
                        $record->createOrDeleteOpportunityBookmark($this->parent);
                    })
                    ->tooltip('Bookmark'),
                Tables\Actions\Action::make('note')
                    ->modalHeading('')
                    ->icon(fn($record) => $record->opportunityNote($this->parent) ? 'heroicon-m-document-text' : 'heroicon-o-document-text')
                    ->label('')
                    ->color("danger")
                    ->action(function ($record, $data) {
                        $record->updateOrCreateOpportunityNote($this->parent, $data['note']);
                    })
                    ->form(function ($record) {
                        $note = $record->opportunityNote($this->parent)?->note;
                        return [
                            Forms\Components\RichEditor::make('note')
                                ->required()
                                ->default($note)
                        ];
                    })
                    ->modalWidth(MaxWidth::Large)
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()->with(['opportunityConnections' => function ($query) {
            $query->where('opportunity_id', $this->parent);
        }]);
    }

    public function getTabs(): array
    {
        return [
            'all' => Tab::make(),
            'bookmarked' => Tab::make()
                ->modifyQueryUsing(fn(Builder $query) => $query->whereHas('opportunityBookmark', function ($query) {
                    $query->where('opportunity_id', $this->parent);
                })),
            'pipeline' => Tab::make()
                ->modifyQueryUsing(fn(Builder $query) => $query->whereHas('opportunityConnections', function ($query) {
                    $query->where('opportunity_id', $this->parent)->where('status', 1);
                })),
            'shortlisted' => Tab::make()
                ->modifyQueryUsing(fn(Builder $query) => $query->whereHas('opportunityConnections', function ($query) {
                    $query->where('opportunity_id', $this->parent)->where('status', 1);
                })),
            'interview_candidates' => Tab::make()
                ->modifyQueryUsing(fn(Builder $query) => $query->whereHas('opportunityConnections', function ($query) {
                    $query->where('opportunity_id', $this->parent);
                })),
            'appointed' => Tab::make()
                ->modifyQueryUsing(fn(Builder $query) => $query->whereHas('opportunityConnections', function ($query) {
                    $query->where('opportunity_id', $this->parent);
                })),
        ];
    }

    public function getBreadcrumbs(): array
    {
        return ([
            SearchResource::getUrl() => "Searches",
            0 => Opportunity::find($this->parent)->name
        ]);
    }
}
